// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"crypto/tls"
	"github.com/utilitywarehouse/certify"
	"sync"
)

var (
	lockIssuerMockIssue sync.RWMutex
)

// IssuerMock is a mock implementation of Issuer.
//
//     func TestSomethingThatUsesIssuer(t *testing.T) {
//
//         // make and configure a mocked Issuer
//         mockedIssuer := &IssuerMock{
//             IssueFunc: func(in1 context.Context, in2 string, in3 *certify.CertConfig) (*tls.Certificate, error) {
// 	               panic("mock out the Issue method")
//             },
//         }
//
//         // use mockedIssuer in code that requires Issuer
//         // and then make assertions.
//
//     }
type IssuerMock struct {
	// IssueFunc mocks the Issue method.
	IssueFunc func(in1 context.Context, in2 string, in3 *certify.CertConfig) (*tls.Certificate, error)

	// calls tracks calls to the methods.
	calls struct {
		// Issue holds details about calls to the Issue method.
		Issue []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 *certify.CertConfig
		}
	}
}

// Issue calls IssueFunc.
func (mock *IssuerMock) Issue(in1 context.Context, in2 string, in3 *certify.CertConfig) (*tls.Certificate, error) {
	if mock.IssueFunc == nil {
		panic("IssuerMock.IssueFunc: method is nil but Issuer.Issue was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 *certify.CertConfig
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIssuerMockIssue.Lock()
	mock.calls.Issue = append(mock.calls.Issue, callInfo)
	lockIssuerMockIssue.Unlock()
	return mock.IssueFunc(in1, in2, in3)
}

// IssueCalls gets all the calls that were made to Issue.
// Check the length with:
//     len(mockedIssuer.IssueCalls())
func (mock *IssuerMock) IssueCalls() []struct {
	In1 context.Context
	In2 string
	In3 *certify.CertConfig
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 *certify.CertConfig
	}
	lockIssuerMockIssue.RLock()
	calls = mock.calls.Issue
	lockIssuerMockIssue.RUnlock()
	return calls
}
